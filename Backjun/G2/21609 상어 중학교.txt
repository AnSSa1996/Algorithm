var sr = new StreamReader(Console.OpenStandardInput());
var sw = new StreamWriter(Console.OpenStandardOutput());

int N;
int M;
int[,] board;
long result = 0;
int[] dx = { 0, 0, 1, -1 };
int[] dy = { 1, -1, 0, 0 };

var inputs = Array.ConvertAll(sr.ReadLine().Split(), int.Parse);
N = inputs[0]; // 격자 한 변의 크기
M = inputs[1]; // 색상의 개수

board = new int[N, N];

for (var y = 0; y < N; y++)
{
    var line = Array.ConvertAll(sr.ReadLine().Split(), int.Parse);
    for (var x = 0; x < N; x++)
    {
        board[y, x] = line[x];
    }
}

while (true)
{
    var group = find();
    if (group.Count < 2) break;
    result += group.Count * group.Count;
    foreach (var (y, x) in group)
    {
        board[y, x] = -100;
    }

    Gravity();
    Rotation();
    Gravity();
}

sw.WriteLine(result);
sw.Flush();
sw.Close();
sr.Close();

List<(int, int)> find()
{
    var visit = new bool[N, N];
    List<(int, int)> list = new();
    var max = 1;
    var rain = 0;
    var row = 0;
    var col = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            if (visit[i, j] || board[i, j] < 0 || board[i, j] == 0) continue;
            List<(int, int)> temp = new();
            int color = board[i, j];
            int count = 0;
            int rc = 0;
            visit[i, j] = true;
            Queue<(int, int)> q = new();
            q.Enqueue((i, j));
            while (q.Count > 0)
            {
                (int r, int c) = q.Dequeue();
                temp.Add((r, c));
                if (board[r, c] == 0) rc++;
                count++;

                for (int k = 0; k < 4; k++)
                {
                    int nr = r + dy[k];
                    int nc = c + dx[k];
                    if (nr < 0 || nr == N || nc < 0 || nc == N || visit[nr, nc] || board[nr, nc] == -1 || (board[nr, nc] != 0 && board[nr, nc] != color)) continue;
                    q.Enqueue((nr, nc));
                    visit[nr, nc] = true;
                }
            }

            if (count > max || (count == max && (rc > rain || (rc == rain && (i > row || (i == row && j > col))))))
            {
                max = count;
                rain = rc;
                row = i;
                col = j;
                list = temp;
            }

            foreach ((int r, int c) in temp)
            {
                if (board[r, c] == 0)
                    visit[r, c] = false;
            }
        }
    }

    return list;
}
void Gravity()
{
    for (var i = N - 2; i >= 0; i--) // 맨 아래 행 바로 위에서부터 시작해서 위로 올라가며 검사
    {
        for (var j = 0; j < N; j++) // 각 열을 순차적으로 검사
        {
            if (board[i, j] > -1) // 현재 셀이 -1이 아니면, 즉 타일이 존재하면
            {
                var r = i;
                while (true) // 타일을 아래로 이동 가능한 만큼 이동
                {
                    if (r + 1 < N && board[r + 1, j] == -100) // 다음 행이 격자 범위 내이고, -2(빈 공간)라면
                    {
                        board[r + 1, j] = board[r, j]; // 타일을 아래 행으로 이동
                        board[r, j] = -100; // 현재 행은 빈 공간으로 설정
                        r += 1; // 계속 아래로 내려가면서 검사
                    }
                    else
                    {
                        break; // 더 이상 내려갈 수 없으면 반복 중단
                    }
                }
            }
        }
    }
}


void Rotation()
{
    var temp = new int[N, N];
    for (var y = 0; y < N; y++)
    {
        for (var x = 0; x < N; x++)
        {
            temp[y, x] = board[y, x];
        }
    }

    for (var y = 0; y < N; y++)
    {
        for (var x = 0; x < N; x++)
        {
            board[y, x] = temp[x, N - 1 - y];
        }
    }
}